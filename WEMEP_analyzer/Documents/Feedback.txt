[리뷰어1]
## 총평
코드 정리, 구조, 그리고 테스트 코드의 부재등으로 좋은 점보다는 아쉬운 점이 있는 과제였습니다.
 
## 좋은점
- TreeSet등의 자료 구조 선택이 괜찮아 보였고, 요청 파라미터의 Validation이 잘 되어 있어 보입니다.
 
## 아쉬운점
- ResultType이 exception package에 포함되어 있는데 구조를 잘못 잡으신 것 같습니다.
- 코드 정리가 덜 되어 있습니다.
- 사용되지 않는 클래스가 있습니다.(ExpectedException등)
- 주석 처리가 되어 있습니다. 사용하지 않는다면 삭제했으면 좋았을 것 같습니다.(MessageSourceProvider)
- 가지고 있는 skeleton project를 활용한 것으로 보이는데 이번 과제와 무관한 코드들이 존재합니다.
- 200 리턴을 위해 ResponseEntity를 정의하는 것은 불필요해 보입니다.(AnalyzeController)
- setter injection보다는 constructor injection을 권장합니다.(AnalyzeController)
- Json serialize, deserializa를 구현한 CommonDto는 불필요합니다.
- contentSplitByLength는 멀티 쓰레드 환경에서 동작하는 코드가 아니기에 StringBuilder가 사용되어야할 것 같습니다.
- readHttpContents에 IOException이나 Exception 발생 시 처리가 같으므로 하나로 합쳐도 될 것 같으며, 단순히 로깅만 하고 그 외에 Exception 처리가 없는 것은 아쉽습니다.
- AnalyzeService에서 Set[]를 통해 데이터를 전달하고 처리하는데, 자주 접근하는 데이터를 인덱스 기준으로 데이터를 가져와서 처리하는 것은 휴먼 에러를 일으킬 확률이 높습니다.
- 개발 편의성을 높여주는 라이브러리를 사용하면 좋았을 것 같습니다.(lombok, restclient등)
- 테스트 코드가 존재하지 않습니다.
 
[리뷰어2]
## 좋은점
- 코드나 메시지를 enum을 활용한 부분이 좋았습니다(ResultType)
- 테스트 코드를 생성된 메서드나 서비스마다 적용하려고 했습니다.
- Controller, Service, Dto 형태로 구분되어 있으며, 불필요하게 서비스 인터페이스를 만들지 않았습니다.
- Request 파라미터의 검증이 되어 있습니다.
- 직접 구현하기 보다 TreeSet을 활용하였습니다.
 
## 아쉬운 점
- 코드 스타일 적용이 안되어 있어 보기 불편합니다.
- 관련 없는 소스 및 주석들이 많이 보입니다.
- 롬북 같은 라이브러리를 사용하지 않아 개발 효율이 떨어집니다.
- 변수명 및 파일명이 좀 더 구체화 되지 않아 주석으로 의미 파악해야 하며, 주석이 없는 경우에는 의미 파악이 어렵습니다. (sb, sb2, CommonDto, 등)
- 자료형과 변수명이 일치하지 않아 혼돈이 됩니다.
- 테스트 코드가 없습니다.
- slf4j 를 사용하지 않고 loggerfactory 사용한 부분이 아쉽습니다.
- Service에 많은 책임이 몰려 있습니다.
- 에러 처리 부분과 로그 부분이 많이 부족하여 오류 발생 가능성이 많으며, 오류 파악에 어렵움이 많아 보입니다.
- 로그를 각 클래스마다 loggerFactory를 선언해서 사용했는데 @Slf4j와 같이 다양한 어노테이션을 활용하면 좋을거같습니다
- 전반적으로 소스가 정리가 안되고 불필요한 소스들이 있어 정리가 필요해보입니다
- 불필요한 상속(CommonDto)이 이루어져있고 getter setter 등은 lombok을 활용했으면 불필요한 소스는 줄일수 있을것으로 보입니다